- name: Apply repo standards
  # metadata:
  #   u: i
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    dependabot_config:
    - package_ecosystem: "npm"
      directory: "/"
      schedule_interval: "daily"
    - package_ecosystem: "composer"
      directory: "/"
      schedule_interval: "weekly"
  tasks:
    - name: Include task set_facts
      include_tasks: set_facts.yaml

    - name: assign repo_path
      set_fact:
        repo_path: "{{ lookup('env', 'PWD') }}"

    - name: Startup info
      debug:
        msg: "repo path: {{ repo_path }}"

    - name: check if .git directory exists
      stat:
        path: "{{ repo_path }}/.git"
      register: git_dir
      failed_when: git_dir.stat.isdir == False

    - name: check if repo.yaml exists in repo_path
      stat:
        path: "{{ repo_path }}/repo.yaml"
      register: repo_yaml
      failed_when: repo_yaml.stat.exists == False

    - name: validate repo config in json format using jsonschema by passing plugin configuration variable as key/value pairs
      ansible.builtin.set_fact:
        config_validity: "{{ repo|ansible.utils.validate(criteria, engine='ansible.utils.jsonschema', draft='draft7') }}"

    - name: fail on schema validation error
      ansible.builtin.fail:
        msg: "The repo.yaml file is invalid: {{ config_validity[0].message }}. Please refer to the README.md for information about schema validation."
      when: config_validity[0].message is defined

    - name: debug output
      debug:
        msg: "{{ repo  }}"

    - name: generate README.md file
      ansible.builtin.template:
        src: "{{ './templates/README.md.j2' }}"
        dest: "{{ repo.path + '/README.md' }}"

    - name: generate SECURITY.md file
      ansible.builtin.template:
        src: "{{ './templates/SECURITY.md.j2' }}"
        dest: "{{ repo.path + '/SECURITY.md' }}"


    - name: generate license file
      ansible.builtin.template:
        src: "{{ './templates/licenses/' + repo.license + '.md.j2' }}"
        dest: "{{ repo.path + '/LICENSE.md' }}"

    - name: copy github actions workflow files
      ansible.builtin.copy:
        src: "./templates/.github/workflows/"
        dest: "{{ repo.path + '/.github/workflows' }}"


    - name: generate .github/settings.yml
      ansible.builtin.template:
        src: "{{ './templates/.github/settings.yml.j2' }}"
        dest: "{{ repo.path + '/.github/settings.yml' }}"

    - name: generate Dockerfile
      ansible.builtin.template:
        src: "{{ './templates/Dockerfile.j2' }}"
        dest: "{{ repo.path + '/Dockerfile' }}"

    - name: generate .dockerignore
      ansible.builtin.template:
        src: "{{ './templates/.dockerignore.j2' }}"
        dest: "{{ repo.path + '/.dockerignore' }}"

    - name: generate .gitignore
      ansible.builtin.template:
        src: "{{ './templates/.gitignore.j2' }}"
        dest: "{{ repo.path + '/.gitignore' }}"

    - name: generate .editorconfig
      ansible.builtin.template:
        src: "{{ './templates/.editorconfig.j2' }}"
        dest: "{{ repo.path + '/.editorconfig' }}"
  
    - name: Check if composer.json exists
      stat:
        path: "{{ repo.path + '/composer.json' }}"
      register: composer_json

    - name: Find composer.json or package.json
      find:
        paths: "{{ repo_path }}"
        patterns:
          - composer.json
          - package.json
      register: find_result
      ignore_errors: yes

    - name: Generate Dependabot configuration
      template:
        src: "./templates/dependabot.yaml.j2"
        dest: "{{ repo_path }}/.github/dependabot.yaml"
      loop: "{{ dependabot_config }}"
      when: "'composer.json' in find_result.files or 'package.json' in find_result.files"


- import_playbook: playbook-husky.yaml

- import_playbook: playbook-devcontainers.yaml
  when: repo_info.ansible_facts.repo.type == 'application'

- import_playbook: playbook-helm.yaml
  when: repo_info.ansible_facts.repo.type == 'application'

- import_playbook: playbook-phpqa.yaml
  when: composer_json.stat.exists
