# [[ repo_managed ]]
name: Release

on:
{% if repo.github_workflows.uses_companion_app %}
  release:
    types: [published]
{% else %}
  workflow_dispatch:
  push:
    branches:
      - [[ repo.github.default_branch ]]
{% endif %}

permissions:
  contents: write
  issues: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - uses: docker/setup-qemu-action@v3

    - uses: docker/setup-buildx-action@v3

{% if repo.github_workflows.uses_companion_app %}
    - id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
        tags: |
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.event.release.tag_name }}
{% else %}
    - name: Semantic release
      id: semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        npm install --no-save semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/exec conventional-changelog @semantic-release/release-notes-generator conventional-changelog-conventionalcommits
        npx semantic-release --repository-url ${{ github.server_url }}/${{ github.repository }}
        echo "release-version=$(cat .gitrelease)" >> "$GITHUB_OUTPUT"

    - id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
        tags: |
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.semantic-release.outputs.release-version }}
{% endif %}

    - uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - uses: docker/build-push-action@v6
      with:
        context: .
        provenance: false
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # For additional docker build args set github_workflows.build.extra_docker_build_args in the repo.yaml file
        build-args: |
{% for key, value in docker_build_args.items() %}
          [[key]]=[[value]]
{% endfor %}
{% if workflow_group in followup_workflows %}
{% for followup_workflow in followup_workflows[workflow_group] %}

  [[ followup_workflow.name ]]-followup:
    needs: build
    secrets: inherit
    uses: ./[[ followup_workflow.path_from_root ]]
{% endfor %}
{% endif %}
